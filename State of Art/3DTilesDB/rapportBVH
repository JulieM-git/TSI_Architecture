## Data hierarchization following the Bounding Volume Hierarchy method:

#### Interest of the method:

The main interest of using a Bounding Volume Hierarchy (BVH) in our workflow lays in the fastening of the geometric processing it allows. Indeed, it is essential that in an interactive web-mapping application, the graphic calculation times are reduced as much as possible, to make its using smoother. Mapping whole cities with their buildings, in 3D, implies complex et heavy data. This data shouldn't be displayed all at once for some obvious reasons of speed and memory performance. 

Organizing data with a BVH tree, will rationalize the display, for each level of camera, by prioritizing the data to render. It also gives more cohesiveness to the information. For exemple, a small-scale point of view (with a weak zoom level) doesn't need to display small and minor geographic objects that would be bearly visible and would overload the scene. Some objects also need to get their representation changed as the level of zoom changes too, to stay readable. If we zoom out, a building needs to get its shape generalized, meaning with less details and simplified shapes as the details wouldn't be visible anymore, and to lighten the data as more and more buildings are meant to be displayed as the view enlarges. Sometimes, some geographical objects could even need to be aggregated. The tree structure is, moreover, a far more efficient data organization. That makes each leaf of the tree (individual objects) or intermediate node (group of object) easily reachable via a database request. The complete dataset doesn't need to be read completely, as the right part of the tree can quickly be targeted.

![](../images/fig03-bvh.png) 

#### Integration in the workflow

Our workflow follows the processes used by Oslandia, described in this article:
[http://www.isprs-ann-photogramm-remote-sens-spatial-inf-sci.net/IV-2-W1/201/2016/isprs-annals-IV-2-W1-201-2016.pdf](http://www.isprs-ann-photogramm-remote-sens-spatial-inf-sci.net/IV-2-W1/201/2016/isprs-annals-IV-2-W1-201-2016.pdf) 

When constructing the 3DTiles dataset, the tiles are linked with the hierarchy. On important thing to care about is the weight of each layer of hierarchy, that must be balanced in comparison with each other. The hieararchic level of each entity in the tree is determined according to its "weight". This weight, can recover multilpe definitions depending on programmer choices, mostly in anticipation of who will visualize the data, and for what usage. By default, and without any further information of a possible professionnal usage, the biggest buildings are generally sent to the higher layers of the hieararchy. But the discretisation could also be made according to certain building attributes for example. 

In few words: a "weight formula" must have been decided before, to calculate the weight of each element, and assign him a level in the tree. Then, starting from our 3D Tiles database, the idea is to capture the bounding box enclosing the very first level of spatial elements (the most important ones), that will form the root of the tree. After, the tile has to be divided in 4 parts, that will generate the 4 first nodes. In each one of this nodes are assigned the bounding boxes of the entites belonging to the following rank to display. Finally, the parent bounding box (of the the superior level) is extended, so that it can contain the whole of the child bounding boxes. And the display hiearchy is made that way, once the parent bounding box is penetrated, the child bounding boxes start to be displayed. And so on, recursively. 

The ouput must be a 3DTiles database, organized following this structure, ready to be hosted on a server.







